

-Roadmap:
    -State maintainer
        -Done
    -Protocols to implement:
        -FTP like protocol
        -Command execution protocol
        -Peer finding protocol
        -Self update protocol
        -Propagation protocol
    -FTP:
        -FTP_ASK
            -Ask for a file
            -Meta: filepath
            -Payload: None
        -FTP_ASK_NF
            -Reply to a FTP_ASK if file is not accessible
            -Meta/Payload: None
        -FTP_FILE
            -File data if file is accesible
            -Meta: filepath, filelen , are there any more parts of the file remaining to send
            -Payload: lenght of payload, payload
        -FTP_FILE_ACK
            -Send this once FTP_FILE is received
            -Meta: filepath, if more parts of the file remaining, send the offset, otherwise -1
            -Payload: none

-Packet Structure
    -8 bytes:Command Name
    -8 Bytes: lenght of metadata(X)
    -X bytes: metadata
    -8 bytes: lenght of payload(Y)
    -Y bytes: payload

-Flow of Control:
    -Server thread:
        -Listens on the port
        -On new connection creats a new thread and consumes the incomming packet
            -Enques the packet to a PACKET_QUEUQ

    -Main thread: It's a event look
        -takes PACKET from PACKET_QUEUQ
        -Looks for saved state (STATE) if any for PACKET.token
        -Instantiates a Handler (HANLER) for PACKET.type with HANDLER.process(packet,meta) 